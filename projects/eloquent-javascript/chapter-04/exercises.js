////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

//I: Write a range function that takes two arguments, start and end
//O: returns an array containing all the numbers from start up to (and including) end.

function range(start, end) {

  //init value numArray to an array literal
  numArray = [];
    
  //if start is strictly equal to end
    if (start === end) {
      return numArray;
    }


  if (start < end) {
    //while start is less than or equal to end
    for (var i = start; i < end; i++) {
      //push start into numArray
      numArray.push(start);

    }

  }
    //return numArray
    return numArray;
  }


////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

//I: write a sum function that takes an array of numbers 
//O: returns the sum of these numbers

function sum(arr) {
  
  //init variable sumOf to 0
  let sumOf = 0

  //create a for loop to go over all vals of arr
  for (let i = 0; i < arr.length; i++) {
      //reassign sumOf to the value of itself plus all array values
      sumOf += arr[i];
  }
  //return sumOf
  return sumOf;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

//I: takes an array as argument 
//O: produces a new array that has the same elements in the inverse order.

function reverseArray(arr) {
  
  //init arrCopy to the values of arr
  let arrCopy = [...arr];

  //return the copy reversed
  return arrCopy.reverse();

}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(arr) {

  return arr.reverse();
  
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList() {

}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray() {

}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend() {

}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth() {

}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual() {

}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
